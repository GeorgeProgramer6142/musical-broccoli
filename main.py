import logging
import json
import os
import random
import string
from config import API_TOKEN, ADMIN_ID, DB_FILE, COMPLAINTS_FILE
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.dispatcher.router import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RegStates(StatesGroup):
    last_name = State()
    first_name = State()
    middle_name = State()
    class_ = State()
    username = State()

class PostStates(StatesGroup):
    text = State()

class CommentStates(StatesGroup):
    post_id = State()
    text = State()

class AnnouncementStates(StatesGroup):
    text = State()

class EditBioStates(StatesGroup):
    text = State()

class SupportStates(StatesGroup):
    waiting_support_reply = State()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    return {
        'pending': [],
        'approved': [{
            'user_id': ADMIN_ID,
            'account_code': '000000',
            'last_name': 'Admin',
            'first_name': 'Admin',
            'middle_name': '',
            'class': 'Admin',
            'username': 'admin',
            'bio': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
            'posts': [],
            'is_admin': True,
            'banned_until': None
        }],
        'announcements': [],
        'posts': [],
        'comments': [],
        'reactions': {
            'likes': {},
            'dislikes': {}
        }
    }

def load_db():
    if not os.path.exists(DB_FILE):
        db = init_db()
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(db, f, ensure_ascii=False, indent=2)
        return db
    
    try:
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            db = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            for user in db['approved']:
                if 'banned_until' not in user:
                    user['banned_until'] = None
                if 'is_admin' not in user:
                    user['is_admin'] = (user['user_id'] == ADMIN_ID)
            
            return db
    except (json.JSONDecodeError, FileNotFoundError):
        db = init_db()
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(db, f, ensure_ascii=False, indent=2)
        return db

def save_db(db):
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def generate_code():
    return ''.join(random.choices(string.digits, k=6))

async def check_ban(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    db = load_db()
    user = next((u for u in db['approved'] if u['user_id'] == user_id), None)
    
    if not user or not user.get('banned_until'):
        return False
    
    try:
        ban_until = datetime.strptime(user['banned_until'], "%Y-%m-%d %H:%M:%S")
        if datetime.now() < ban_until:
            return True
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–∞–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º
            user['banned_until'] = None
            save_db(db)
            return False
    except:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã
        user['banned_until'] = None
        save_db(db)
        return False

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def cmd_start(message: Message):
    db = load_db()
    if any(u['user_id'] == message.from_user.id for u in db['approved']):
        await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reg")

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –°–ø—Ä–∞–≤–∫–∞
/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/newpost - –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
/posts - –õ–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
/top - —Ç–æ–ø –ø–æ—Å—Ç–æ–≤
/comments [–Ω–æ–º–µ—Ä] - –∫–æ–º–µ–Ω—Ç—ã
/comment [–Ω–æ–º–µ—Ä] - –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
/like [–Ω–æ–º–µ—Ä] - –õ–∞–π–∫–Ω—É—Ç—å
/dislike [–Ω–æ–º–µ—Ä] - –î–∏–∑–ª–∞–π–∫–Ω—É—Ç—å
/editbio - –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/complain [–∫–æ–¥] [–ø—Ä–∏—á–∏–Ω–∞] - –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è
/support [–≤–æ–ø—Ä–æ—Å] - –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º
"""
    
    if message.from_user.id == ADMIN_ID:
        help_text += """\n\n‚öôÔ∏è –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:
/ban [–∫–æ–¥] [–≤—Ä–µ–º—è] - –ó–∞–±–∞–Ω–∏—Ç—å
/unban [–∫–æ–¥] - –†–∞–∑–±–∞–Ω–∏—Ç—å
/broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞
/complaints - –ñ–∞–ª–æ–±—ã
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/update - –¢–µ—Ö. —Ä–∞–±–æ—Ç—ã
/adminstart - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –∑–∞–∫–æ–Ω—á–µ–Ω—ã"""
    
    await message.answer(help_text)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ—á–∫–∏ —É —Ç–µ–±—è.–≤–∞—Ç–µ–ª—è
@router.message(Command("reg"))
async def reg_start(message: Message, state: FSMContext):
    db = load_db()
    if any(u['user_id'] == message.from_user.id for u in db['approved'] + db['pending']):
        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏")
        return
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegStates.last_name)

@router.message(RegStates.last_name)
async def reg_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegStates.first_name)

@router.message(RegStates.first_name)
async def reg_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '-'):")
    await state.set_state(RegStates.middle_name)

@router.message(RegStates.middle_name)
async def reg_middle_name(message: Message, state: FSMContext):
    await state.update_data(middle_name=message.text if message.text != '-' else '')
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10–ê):")
    await state.set_state(RegStates.class_)

@router.message(RegStates.class_)
async def reg_class(message: Message, state: FSMContext):
    await state.update_data(class_=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username (–±–µ–∑ @):")
    await state.set_state(RegStates.username)

@router.message(RegStates.username)
async def reg_username(message: Message, state: FSMContext):
    db = load_db()
    data = await state.get_data()
    
    user_data = {
        'user_id': message.from_user.id,
        'account_code': generate_code(),
        'last_name': data['last_name'],
        'first_name': data['first_name'],
        'middle_name': data['middle_name'],
        'class': data['class_'],
        'username': message.text,
        'bio': "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ —Å–µ–±–µ",
        'posts': [],
        'is_admin': False
    }
    
    db['pending'].append(user_data)
    save_db(db)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{message.from_user.id}"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")
    )
    
    await bot.send_message(
        ADMIN_ID,
        f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
        f"–§–ò–û: {data['last_name']} {data['first_name']} {data['middle_name']}\n"
        f"–ö–ª–∞—Å—Å: {data['class_']}\n"
        f"Username: @{message.text}\n"
        f"–ö–æ–¥: {user_data['account_code']}",
        reply_markup=builder.as_markup()
    )
    
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í–∞—à –∫–æ–¥: {user_data['account_code']}")
    await state.clear()

@router.message(Command("profile"))
async def profile(message: Message):
    db = load_db()
    user = next((u for u in db['approved'] if u['user_id'] == message.from_user.id), None)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    full_name = f"{user['last_name']} {user['first_name']} {user['middle_name']}".strip()
    text = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
–§–ò–û: {full_name}
–ö–ª–∞—Å—Å: {user['class']}
–ö–æ–¥: {user['account_code']}
–û —Å–µ–±–µ: {user['bio']}"""
    
    # –î–ª—è –∞–¥–º–∏–Ω–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –ª—é–±–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    if message.from_user.id == ADMIN_ID and len(message.text.split()) > 1:
        target = next((u for u in db['approved'] if u['account_code'] == message.text.split()[1]), None)
        if target:
            full_name = f"{target['last_name']} {target['first_name']} {target['middle_name']}".strip()
            text = f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å (–∞–¥–º–∏–Ω):
–§–ò–û: {full_name}
–ö–ª–∞—Å—Å: {target['class']}
Username: @{target['username']}
–ö–æ–¥: {target['account_code']}
Telegram ID: {target['user_id']}"""
    
    await message.answer(text)

@router.message(RegStates.username)
async def reg_username(message: Message, state: FSMContext):
    db = load_db()
    data = await state.get_data()
    
    user_data = {
        'user_id': message.from_user.id,
        'account_code': generate_code(),
        'last_name': data['last_name'],
        'first_name': data['first_name'],
        'middle_name': data['middle_name'],
        'class': data['class_'],
        'username': message.text,
        'bio': "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ —Å–µ–±–µ",
        'posts': [],
        'is_admin': False,
        'banned_until': None
    }
    
    db['pending'].append(user_data)
    save_db(db)
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{message.from_user.id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")
    )
    
    await bot.send_message(
        ADMIN_ID,
        f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–§–ò–û: {data['last_name']} {data['first_name']}\n–ö–ª–∞—Å—Å: {data['class_']}\nUsername: @{message.text}\n–ö–æ–¥: {user_data['account_code']}",
        reply_markup=builder.as_markup()
    )
    
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í–∞—à –∫–æ–¥: {user_data['account_code']}")
    await state.clear()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
@router.message(Command("comments"))
async def cmd_comments(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –ø–æ—Å—Ç–æ–º"""
    try:
        post_id = int(message.text.split()[1])
        db = load_db()
        
        if post_id < 1 or post_id > len(db['posts']):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞")
            return
        
        post = db['posts'][post_id-1]
        
        if not post['comments']:
            await message.answer(f"üì≠ –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥ –ø–æ—Å—Ç–æ–º #{post_id}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        text = f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É #{post_id}:\n{'='*20}\n"
        text += f"{post['text'][:100]}{'...' if len(post['text']) > 100 else ''}\n{'='*20}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        for i, comment in enumerate(post['comments'], 1):
            text += f"{i}. {comment['author_name']}:\n{comment['text']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        text += f"üìä –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(post['comments'])}"
        
        await message.answer(text)
    except (IndexError, ValueError):
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /comments [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]\n–ü—Ä–∏–º–µ—Ä: /comments 3")

@router.message(Command("post"))
async def cmd_post(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)"""
    try:
        post_id = int(message.text.split()[1])
        db = load_db()
        
        if post_id < 1 or post_id > len(db['posts']):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞")
            return
        
        post = db['posts'][post_id-1]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üìù –ü–æ—Å—Ç #{post_id} –æ—Ç {post['author_name']}:\n{'='*30}\n"
        text += f"{post['text']}\n{'='*30}\n"
        text += f"‚ù§Ô∏è {post.get('likes', 0)} | üëé {post.get('dislikes', 0)} | üí¨ {len(post['comments'])}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if post['comments']:
            text += "üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n"
            for comment in post['comments'][-3:]:
                text += f"- {comment['author_name']}: {comment['text'][:50]}"
                text += "..." if len(comment['text']) > 50 else ""
                text += "\n"
            text += f"\nüëâ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: /comments {post_id}"
        else:
            text += "üì≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
        
        # –ö–Ω–æ–ø–∫–∞ "–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å"
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"comment_{post_id}"
            )
        )
        
        await message.answer(
            text,
            reply_markup=builder.as_markup()
        )
    except (IndexError, ValueError):
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /post [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]\n–ü—Ä–∏–º–µ—Ä: /post 3")

@router.callback_query(F.data.startswith("comment_"))
async def start_commenting(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    post_id = int(callback.data.split('_')[1])
    await state.update_data(post_id=post_id)
    await callback.message.answer(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É #{post_id}:")
    await state.set_state(CommentStates.text)
    await callback.answer()
@router.message(Command("top"))
async def cmd_top(message: Message):
    db = load_db()
    top_posts = sorted(db['posts'], key=lambda x: x['likes'] - x.get('dislikes', 0), reverse=True)[:5]
    
    if not top_posts:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞")
        return
    
    text = "üèÜ –¢–æ–ø –ø–æ—Å—Ç–æ–≤:\n\n"
    for i, post in enumerate(top_posts, 1):
        rating = post['likes'] - post.get('dislikes', 0)
        text += f"{i}. #{post['id']} ({rating} –±–∞–ª–ª–æ–≤)\n"
        text += f"{post['text'][:50]}...\n\n"
    
    await message.answer(text)

@router.message(Command("newpost"))
async def cmd_newpost(message: Message, state: FSMContext):
    if await check_ban(message.from_user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã")
        return
    
    db = load_db()
    if not any(u['user_id'] == message.from_user.id for u in db['approved']):
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    await message.answer("üìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:")
    await state.set_state(PostStates.text)

@router.message(PostStates.text)
async def newpost_finish(message: Message, state: FSMContext):
    db = load_db()
    user = next(u for u in db['approved'] if u['user_id'] == message.from_user.id)
    
    post = {
        'id': len(db['posts']) + 1,
        'author_id': message.from_user.id,
        'author_name': f"{user['last_name']} {user['first_name']}",
        'text': message.text,
        'likes': 0,
        'dislikes': 0,
        'liked_by': [],
        'disliked_by': [],
        'comments': [],
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    db['posts'].append(post)
    save_db(db)
    await message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    await state.clear()

@router.message(Command("posts"))
async def cmd_posts(message: Message):
    db = load_db()
    if not db['posts']:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
        return
    
    text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:\n\n"
    for post in db['posts'][-10:][::-1]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        text += f"#{post['id']} {post['author_name']}:\n{post['text']}\n"
        text += f"‚ù§Ô∏è {post['likes']} | üëé {post['dislikes']} | üí¨ {len(post['comments'])}\n\n"
    
    await message.answer(text)

# –õ–∞–π–∫–∏/–¥–∏–∑–ª–∞–π–∫–∏
@router.message(Command("like"))
async def cmd_like(message: Message):
    if await check_ban(message.from_user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏")
        return
    
    try:
        post_id = int(message.text.split()[1])
        db = load_db()
        
        if post_id < 1 or post_id > len(db['posts']):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞")
            return
        
        post = db['posts'][post_id-1]
        
        if message.from_user.id in post['liked_by']:
            await message.answer("‚ùå –í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É")
            return
        
        if message.from_user.id in post['disliked_by']:
            post['dislikes'] -= 1
            post['disliked_by'].remove(message.from_user.id)
        
        post['likes'] += 1
        post['liked_by'].append(message.from_user.id)
        save_db(db)
        await message.answer("‚ù§Ô∏è –í–∞—à –ª–∞–π–∫ —É—á—Ç–µ–Ω!")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /like [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]")

@router.message(Command("dislike"))
async def cmd_dislike(message: Message):
    if await check_ban(message.from_user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫–∏")
        return
    
    try:
        post_id = int(message.text.split()[1])
        db = load_db()
        
        if post_id < 1 or post_id > len(db['posts']):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞")
            return
        
        post = db['posts'][post_id-1]
        
        if message.from_user.id in post['disliked_by']:
            await message.answer("‚ùå –í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É")
            return
        
        if message.from_user.id in post['liked_by']:
            post['likes'] -= 1
            post['liked_by'].remove(message.from_user.id)
        
        post['dislikes'] += 1
        post['disliked_by'].append(message.from_user.id)
        save_db(db)
        await message.answer("üëé –í–∞—à –¥–∏–∑–ª–∞–π–∫ —É—á—Ç–µ–Ω!")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dislike [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]")

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
@router.message(Command("comment"))
async def cmd_comment(message: Message, state: FSMContext):
    if await check_ban(message.from_user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        return
    
    try:
        post_id = int(message.text.split()[1])
        await state.update_data(post_id=post_id)
        await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        await state.set_state(CommentStates.text)
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /comment [–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞]")

@router.message(CommentStates.text)
async def comment_finish(message: Message, state: FSMContext):
    db = load_db()
    data = await state.get_data()
    post_id = data['post_id']
    user = next(u for u in db['approved'] if u['user_id'] == message.from_user.id)
    
    if post_id < 1 or post_id > len(db['posts']):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞")
        await state.clear()
        return
    
    comment = {
        'author_id': message.from_user.id,
        'author_name': f"{user['last_name']} {user['first_name']}",
        'text': message.text,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    db['posts'][post_id-1]['comments'].append(comment)
    save_db(db)
    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

# –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±
@router.message(Command("complain"))
async def cmd_complain(message: Message):
    if await check_ban(message.from_user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã")
        return
    
    try:
        _, target, *reason_parts = message.text.split(maxsplit=2)
        reason = ' '.join(reason_parts)
        
        db = load_db()
        user = next((u for u in db['approved'] if u['user_id'] == message.from_user.id), None)
        target_user = next((u for u in db['approved'] if u['account_code'] == target or u['username'] == target), None)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
            
        if not target_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if target_user['user_id'] == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è")
            return
            
        complaint = {
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'target_id': target_user['user_id'],
            'target_name': f"{target_user['last_name']} {target_user['first_name']}",
            'target_code': target_user['account_code'],
            'complainant_id': message.from_user.id,
            'complainant_name': f"{user['last_name']} {user['first_name']}",
            'reason': reason,
            'status': 'new'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        complaints = []
        if os.path.exists(COMPLAINTS_FILE):
            with open(COMPLAINTS_FILE, 'r', encoding='utf-8') as f:
                complaints = json.load(f)
        
        complaints.append(complaint)
        with open(COMPLAINTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(complaints, f, ensure_ascii=False, indent=2)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"reply_to_{message.from_user.id}"
            ),
            InlineKeyboardButton(
                text="üî® –ó–∞–±–∞–Ω–∏—Ç—å",
                callback_data=f"ban_from_{message.from_user.id}_{target_user['account_code']}"
            )
        )
        
        await bot.send_message(
            ADMIN_ID,
            f"üö® –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:\n–û—Ç: {user['last_name']} {user['first_name']}\n–ù–∞: {target_user['last_name']} {target_user['first_name']}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            reply_markup=builder.as_markup()
        )
        
        await message.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /complain [–∫–æ–¥/username] [–ø—Ä–∏—á–∏–Ω–∞]")

# –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.message(Command("support"))
async def cmd_support(message: Message):
    if await check_ban(message.from_user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        return
    
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /support")
            return
        
        db = load_db()
        user = next((u for u in db['approved'] if u['user_id'] == message.from_user.id), None)
        
        if not user:
            await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
        
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"reply_to_{message.from_user.id}"
            )
        )
        
        await bot.send_message(
            ADMIN_ID,
            f"üÜò –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n–û—Ç: {user['last_name']} {user['first_name']}\n–ö–æ–¥: {user['account_code']}\n–í–æ–ø—Ä–æ—Å: {args[1]}",
            reply_markup=builder.as_markup()
        )
        
        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
class SupportStates(StatesGroup):
    waiting_support_reply = State()

@router.message(Command("support"))
async def cmd_support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    db = load_db()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not any(user['user_id'] == message.from_user.id for user in db['approved']):
        await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (/reg)")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n–ü—Ä–∏–º–µ—Ä: /support –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç?")
        return
    
    user = next(u for u in db['approved'] if u['user_id'] == message.from_user.id)
    user_name = f"{user['last_name']} {user['first_name']}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_msg = (
        f"üÜò –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n\n"
        f"–û—Ç: {user_name} (@{user['username']})\n"
        f"–ö–æ–¥: {user['account_code']}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{args[1]}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å" –¥–ª—è –∞–¥–º–∏–Ω–∞
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
            callback_data=f"reply_to_{message.from_user.id}"
        )
    )
    
    try:
        await bot.send_message(
            ADMIN_ID,
            admin_msg,
            reply_markup=builder.as_markup()
        )
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")

@router.callback_query(F.data.startswith("reply_to_"))
async def process_support_reply(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    user_id = int(callback.data.split('_')[-1])
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    
    await state.update_data(support_user_id=user_id)
    await callback.message.answer(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):")
    await state.set_state(SupportStates.waiting_support_reply)

@router.message(SupportStates.waiting_support_reply)
async def send_support_reply(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = await state.get_data()
    user_id = data.get('support_user_id')
    
    if not user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        await bot.send_message(
            user_id,
            f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
    
    await state.clear()

@router.message(Command("adminstart"))
async def cmd_adminstart(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    db = load_db()
    sent_count = 0
    
    for user in db['approved']:
        try:
            await bot.send_message(user['user_id'], "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —Å–æ—Ü—Å–µ—Ç—å —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! ")
            sent_count += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
    
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

@router.message(Command("users"))
async def users_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    db = load_db()
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in db['approved']:
        text += f"{user['last_name']} {user['first_name']} - {user['class']}\n"
        text += f"–ö–æ–¥: {user['account_code']} | @{user['username']}\n\n"
    
    await message.answer(text)

@router.message(Command("broadcast"))
async def broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(message.text.split()) < 2:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /broadcast [—Ç–µ–∫—Å—Ç]")
        return
    
    db = load_db()
    text = ' '.join(message.text.split()[1:])
    sent = 0
    
    for user in db['approved']:
        try:
            await bot.send_message(user['user_id'], f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
            sent += 1
        except:
            continue
    
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

@router.message(Command("update"))
async def update_bot(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    db = load_db()
    sent = 0
    
    for user in db['approved']:
        try:
            await bot.send_message(
                user['user_id'],
                "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
                "–°–æ—Ü—Å–µ—Ç—å –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. "
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
            )
            sent += 1
        except:
            continue
    
    await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    save_db(db)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    exit(0)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ==========
@router.callback_query(F.data.startswith("approve_") | F.data.startswith("reject_"))
async def process_registration(callback: CallbackQuery):
    db = load_db()
    action, user_id = callback.data.split('_')
    user_id = int(user_id)
    
    user = next((u for u in db['pending'] if u['user_id'] == user_id), None)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if action == "approve":
        db['approved'].append(user)
        await bot.send_message(
            user_id,
            "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
        )
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ {user['last_name']} {user['first_name']} –æ–¥–æ–±—Ä–µ–Ω–∞"
        )
    else:
        await bot.send_message(
            user_id,
            "üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await callback.message.edit_text(
            f"‚ùå –ó–∞—è–≤–∫–∞ {user['last_name']} {user['first_name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        )
    
    db['pending'].remove(user)
    save_db(db)
    await callback.answer()

@router.message(Command("adminstart"))
async def cmd_adminstart(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    db = load_db()
    sent_count = 0
    
    for user in db['approved']:
        try:
            await bot.send_message(user['user_id'], "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —Å–æ—Ü—Å–µ—Ç—å —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! ")
            sent_count += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
    cmd_help
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

@router.message(Command("ban"))
async def cmd_ban(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        args = message.text.split()
        if len(args) < 3:
            await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /ban [–∫–æ–¥] [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: /ban 123456 7d –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª")
            return
        
        target_code = args[1]
        ban_duration = args[2]
        reason = ' '.join(args[3:]) if len(args) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        db = load_db()
        
        target_user = next((u for u in db['approved'] if u['account_code'] == target_code), None)
        if not target_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if ban_duration.endswith('d'):
            days = int(ban_duration[:-1])
            ban_until = datetime.now() + timedelta(days=days)
        elif ban_duration.endswith('h'):
            hours = int(ban_duration[:-1])
            ban_until = datetime.now() + timedelta(hours=hours)
        else:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 7d (7 –¥–Ω–µ–π) –∏–ª–∏ 24h (24 —á–∞—Å–∞)")
            return
        
        target_user['banned_until'] = ban_until.strftime("%Y-%m-%d %H:%M:%S")
        save_db(db)
        
        try:
            await bot.send_message(
                target_user['user_id'],
                f"‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        except:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['last_name']} {target_user['first_name']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(Command("unban"))
async def cmd_unban(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /unban [–∫–æ–¥]")
            return
        
        target_code = args[1]
        db = load_db()
        
        target_user = next((u for u in db['approved'] if u['account_code'] == target_code), None)
        if not target_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        target_user['banned_until'] = None
        save_db(db)
        
        try:
            await bot.send_message(
                target_user['user_id'],
                "‚úÖ –í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
            )
        except:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['last_name']} {target_user['first_name']} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@router.message(Command("complaints"))
async def cmd_complaints(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    if not os.path.exists(COMPLAINTS_FILE):
        await message.answer("‚ÑπÔ∏è –ñ–∞–ª–æ–± –Ω–µ—Ç")
        return
    
    try:
        with open(COMPLAINTS_FILE, 'r', encoding='utf-8') as f:
            complaints = json.load(f)
        
        if not complaints:
            await message.answer("‚ÑπÔ∏è –ñ–∞–ª–æ–± –Ω–µ—Ç")
            return
        
        text = "üìú –°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±:\n\n"
        for i, comp in enumerate(complaints[-10:][::-1], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∂–∞–ª–æ–±
            text += f"{i}. –û—Ç: {comp['complainant_name']}\n–ù–∞: {comp['target_name']}\n–ü—Ä–∏—á–∏–Ω–∞: {comp['reason']}\n–î–∞—Ç–∞: {comp['timestamp']}\n\n"
        
        await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–ª–æ–±: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂–∞–ª–æ–±")

@router.message(Command("users"))
async def cmd_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    db = load_db()
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in db['approved']:
        status = "üõë –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.get('banned_until') else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        text += f"{user['last_name']} {user['first_name']} ({status})\n"
        text += f"–ö–æ–¥: {user['account_code']} | @{user['username']}\n\n"
    
    await message.answer(text)

@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    if len(message.text.split()) < 2:
        await message.answer("‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç: /broadcast [—Ç–µ–∫—Å—Ç]")
        return
    
    db = load_db()
    text = ' '.join(message.text.split()[1:])
    sent = 0
    
    for user in db['approved']:
        try:
            await bot.send_message(user['user_id'], f"üì¢ –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{text}")
            sent += 1
        except:
            continue
    
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("approve_"))
async def approve_user(callback: CallbackQuery):
    db = load_db()
    user_id = int(callback.data.split('_')[1])
    user = next((u for u in db['pending'] if u['user_id'] == user_id), None)
    
    if user:
        db['approved'].append(user)
        db['pending'].remove(user)
        save_db(db)
        
        try:
            await bot.send_message(user_id, "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.")
        except:
            pass
        
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['last_name']} {user['first_name']} –æ–¥–æ–±—Ä–µ–Ω")
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data.startswith("reject_"))
async def reject_user(callback: CallbackQuery):
    db = load_db()
    user_id = int(callback.data.split('_')[1])
    user = next((u for u in db['pending'] if u['user_id'] == user_id), None)
    
    if user:
        db['pending'].remove(user)
        save_db(db)
        
        try:
            await bot.send_message(user_id, "üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except:
            pass
        
        await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ {user['last_name']} {user['first_name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data.startswith("reply_to_"))
async def reply_to_user(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split('_')[2])
    await callback.message.edit_reply_markup()
    await state.update_data(support_user_id=user_id)
    await callback.message.answer(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):")
    await state.set_state(SupportStates.waiting_support_reply)

@router.callback_query(F.data.startswith("ban_from_"))
async def ban_from_complaint(callback: CallbackQuery):
    parts = callback.data.split('_')
    user_id = int(parts[2])  # ID –∂–∞–ª–æ–±—â–∏–∫–∞
    target_code = parts[3]   # –ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞
    
    db = load_db()
    target_user = next((u for u in db['approved'] if u['account_code'] == target_code), None)
    
    if target_user:
        # –ë–∞–Ω –Ω–∞ 3 –¥–Ω—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ban_until = datetime.now() + timedelta(days=3)
        target_user['banned_until'] = ban_until.strftime("%Y-%m-%d %H:%M:%S")
        save_db(db)
        
        try:
            await bot.send_message(
                target_user['user_id'],
                f"‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')} –ø–æ –∂–∞–ª–æ–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        except:
            pass
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['last_name']} {target_user['first_name']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∂–∞–ª–æ–±—â–∏–∫–∞
        try:
            await bot.send_message(
                user_id,
                f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user['last_name']} {target_user['first_name']} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–∞—à–µ–π –∂–∞–ª–æ–±–µ"
            )
        except:
            pass
    else:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.message(SupportStates.waiting_support_reply)
async def send_support_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('support_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        await state.clear()
        return
    
    try:
        await bot.send_message(
            user_id,
            f"üì© –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
